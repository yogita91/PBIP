createOrReplace

    table Main
        lineageTag: b7cff6a8-c974-4cae-8fc5-de4c8a63f236
        column name
            dataType: string
            lineageTag: de6ca28f-fec3-43ef-ac59-d8100d796302
            summarizeBy: none
            sourceColumn: name
            annotation SummarizationSetBy = Automatic
        partition __cityAliasesBase = m
            mode: import
            source =
                let
                    Source = [lib://DataFiles/cityAliases.qvd]
                in
                    Source
        partition __cityGeoBase = m
            mode: import
            source =
                let
                    Source = [lib://DataFiles/cityGeo.qvd]
                in
                    Source
        partition __cityName2Key = m
            mode: import
            source =
                let
                    Source = [lib://DataFiles/dataset.xlsx]
                in
                    Source
        partition __cityKey2GeoPoint = m
            mode: import
            source =
                let
                    Source = [lib://DataFiles/dataset.xlsx]
                in
                    Source
        partition Employees = m
            mode: import
            source =
                let
                    Source = [lib://DataFiles/dataset.xlsx]
                in
                    Source
        partition Sales = m
            mode: import
            source =
                let
                    Source = [lib://DataFiles/dataset.xlsx]
                in
                    Source
        partition Locations = m
            mode: import
            source =
                let
                    Source = [lib://DataFiles/dataset.xlsx]
                in
                    Source
        measures:
            - name: 'Best Performing Employee (Highest Sales)'
              expression: FirstSortedValue([Employee-Sales], -Aggr(SUM([Total Sales]), EmpID))
              formatString: 0
              lineageTag: 123e4567-e89b-12d3-a456-426614174000
            - name: 'Highest Sales Location'
              expression: FirstSortedValue([Location-Sales], -Aggr(SUM([Total Sales]), LocId))
              formatString: 0
              lineageTag: 123e4567-e89b-12d3-a456-426614174001
            - name: 'Sales per Day'
              expression: SUM([Total Sales]) / COUNT(DISTINCT [Date])
              formatString: $ #,0.00
              lineageTag: 123e4567-e89b-12d3-a456-426614174002
            - name: 'Units Sold per Transaction'
              expression: SUM([Total Units]) / COUNT([Total Units])
              formatString: 0
              lineageTag: 123e4567-e89b-12d3-a456-426614174003
            - name: 'Sales per Employee per Location'
              expression: SUM([Total Sales]) / COUNT(DISTINCT [Employee-Sales])
              formatString: $ #,0.00
              lineageTag: 123e4567-e89b-12d3-a456-426614174004