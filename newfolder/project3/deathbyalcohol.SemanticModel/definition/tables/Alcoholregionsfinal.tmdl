```yaml
createOrReplace

    table Hospital_ER
        lineageTag: b7cff6a8-c974-4cae-8fc5-de4c8a63f236
        column 'date'
            dataType: datetime
            lineageTag: c78f148f-d4e8-4539-a99e-f307967202c5
            summarizeBy: none
            sourceColumn: date
            annotation SummarizationSetBy = Automatic

        column patient_id
            dataType: string
            lineageTag: de6ca28f-fec3-43ef-ac59-d8100d796302
            summarizeBy: none
            sourceColumn: patient_id
            annotation SummarizationSetBy = Automatic

        column 'patient_gender'
            dataType: string
            lineageTag: f6202de1-1c5d-4b22-be91-20bdf5e8aa91
            summarizeBy: none
            sourceColumn: patient_gender
            annotation SummarizationSetBy = Automatic

        column 'patient_age'
            dataType: int64
            lineageTag: 84cee5a4-5c00-4b04-91b1-2198a4b886b5
            summarizeBy: average
            sourceColumn: patient_age
            annotation SummarizationSetBy = Automatic

        column 'patient_sat_score'
            dataType: int64
            lineageTag: e034f96e-7e6a-4e13-bc20-24246dfa9b6c
            summarizeBy: average
            sourceColumn: patient_sat_score
            annotation SummarizationSetBy = Automatic

        column 'patient_first_inital'
            dataType: string
            lineageTag: 714db991-0450-4d21-8145-640a104a6ca9
            summarizeBy: none
            sourceColumn: patient_first_inital
            annotation SummarizationSetBy = Automatic

        column 'patient_last_name'
            dataType: string
            lineageTag: 6fca95b5-7985-4734-a1d5-3549521ee412
            summarizeBy: none
            sourceColumn: patient_last_name
            annotation SummarizationSetBy = Automatic

        column 'patient_race'
            dataType: string
            lineageTag: ba33573b-ad31-4501-8471-8afa1fda5135
            summarizeBy: none
            sourceColumn: patient_race
            annotation SummarizationSetBy = Automatic

        column 'patient_admin_flag'
            dataType: string
            lineageTag: 79edc306-1a81-471c-822a-de4ae99fa1db
            summarizeBy: none
            sourceColumn: patient_admin_flag
            annotation SummarizationSetBy = Automatic

        column 'patient_waittime'
            dataType: int64
            lineageTag: 0b6027cd-5306-4132-a682-440e98a719c6
            summarizeBy: average
            sourceColumn: patient_waittime
            annotation SummarizationSetBy = Automatic

        column 'department_referral'
            dataType: string
            lineageTag: 567416f1-2070-42ef-ae44-8a64f4988048
            summarizeBy: none
            sourceColumn: department_referral
            annotation SummarizationSetBy = Automatic

        partition Hospital_ER = m
            mode: import
            source =
                let
                    Source = Sql.Database("health-careserver.database.windows.net", "health-care2025", [Query="SELECT [date], [patient_id], [patient_gender], [patient_age], [patient_sat_score], [patient_first_inital], [patient_last_name], [patient_race], [patient_admin_flag], [patient_waittime], [department_referral] FROM dbo.Hospital ER"]),
                    ChangedType = Table.TransformColumnTypes(Source,{{"date", type datetime}, {"patient_id", type text}, {"patient_gender", type text}, {"patient_age", Int64.Type}, {"patient_sat_score", type number}, {"patient_first_inital", type text}, {"patient_last_name", type text}, {"patient_race", type text}, {"patient_admin_flag", type text}, {"patient_waittime", type number}, {"department_referral", type text}})
                in
                    ChangedType

        annotation PBI_NavigationStepName = Navigation
        annotation PBI_ResultType = Table
        measure 'Total patients' = COUNTROWS('Hospital_ER')
          formatString: 0
          lineageTag: jTacdm

        measure 'Average Wait Time' = AVERAGE('Hospital_ER'[patient_waittime])
          formatString: #,##0.00
          lineageTag: pnxvJ

        measure 'Satisfaction Score Analysis' = AVERAGE('Hospital_ER'[patient_sat_score])
          formatString: 0%
          lineageTag: pUuEYW

        measure 'Patient Age Distribution' = AVERAGE('Hospital_ER'[patient_age])
          formatString: #,##0
          lineageTag: RhBgr

        measure 'Admission Rate' = COUNTROWS(FILTER('Hospital_ER', 'Hospital_ER'[patient_admin_flag] = 'True'))
          formatString: #,##0.00
          lineageTag: jmzHzN

        measure 'Referral Department Distribution' = COUNTROWS(FILTER('Hospital_ER', 'Hospital_ER'[department_referral] = 'General Practice'))
          formatString: 0
          lineageTag: mPWPA

        measure 'Admitted' = COUNTROWS(FILTER('Hospital_ER', 'Hospital_ER'[patient_admin_flag] = '1'))
          formatString: #,##0
          lineageTag: mpdQJE

        measure 'Not Admitted' = COUNTROWS(FILTER('Hospital_ER', 'Hospital_ER'[patient_admin_flag] = '0'))
          formatString: 0
          lineageTag: SRBCuV
```