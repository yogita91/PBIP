```yaml
createOrReplace

    table Main
        lineageTag: b7cff6a8-c974-4cae-8fc5-de4c8a63f236
        column name
            dataType: string
            lineageTag: a7cf89ab-334b-4585-abc3-a579f15c2e44
            summarizeBy: none
            sourceColumn: name
            annotation SummarizationSetBy = Automatic
        partition Employees
            mode: import
            source =
                let
                    Source = [lib://DataFiles/dataset.xlsx],
                    Table = Source{[ Name="Employees", Kind="Table"]}[Data]
                in
                    Table
        partition Sales
            mode: import
            source =
                let
                    Source = [lib://DataFiles/dataset.xlsx],
                    Table = Source{[ Name="Sales", Kind="Table"]}[Data]
                in
                    Table
        partition Locations
            mode: import
            source =
                let
                    Source = [lib://DataFiles/dataset.xlsx],
                    Table = Source{[ Name="Locations", Kind="Table"]}[Data]
                in
                    Table
        tag field [City] with '$geoname', '$relates_Locations.City_GeoInfo'
        tag field [Locations.City_GeoInfo] with '$geopoint', '$hidden', '$relates_City'
        drop tables __cityAliasesBase, __cityGeoBase
        name: autoCalendar
        fields:
            - name: Date
              tagged: '$date'
              definitions:
                - name: Year
                  type: Dual(Year($1), YearStart($1))
                  tags: ['$axis', '$year']
                - name: Quarter
                  type: Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00))
                  tags: ['$quarter', '$cyclic']
                - name: Month
                  type: Month($1)
                  tags: ['$month', '$cyclic']
        measures:
            - name: 'Best Performing Employee (Highest Sales)'
              expression: FirstSortedValue([Employee-Sales], -Aggr(SUM([Total Sales]), EmpID))
              formatString: U
            - name: 'Highest Sales Location'
              expression: FirstSortedValue([Employee-Sales], -Aggr(SUM([Total Sales]), EmpID))
              formatString: U
            - name: 'Sales per Day'
              expression: SUM([Total Sales]) / COUNT(DISTINCT [Date])
              formatString: U
            - name: 'Units Sold per Transaction'
              expression: SUM([Total Units]) / COUNT([Total Units])
              formatString: U
            - name: 'Sales per Employee per Location'
              expression: SUM([Total Sales]) / COUNT(DISTINCT [Employee-Sales])
              formatString: U
```