```yaml
createOrReplace

    table Main
        lineageTag: a7f434bf-b01b-4bcb-afe6-16463b65f10e
        column __cityAliasesBase
            dataType: string
            lineageTag: 4e8a4085-5452-42de-8432-b76234978859
            summarizeBy: none
            sourceColumn: __cityAliasesBase
            annotation SummarizationSetBy = Automatic

        column __cityGeoBase
            dataType: string
            lineageTag: 00559413-542e-4f94-a04f-09d202ce8310
            summarizeBy: none
            sourceColumn: __cityGeoBase
            annotation SummarizationSetBy = Automatic
            
        partition Employees = m
            mode: import
            source =
                let
                    Source = [lib://DataFiles/dataset.xlsx]
                in
                    Source
        partition Sales = m
            mode: import
            source =
                let
                    Source = [lib://DataFiles/dataset.xlsx]
                in
                    Source
        partition Locations = m
            mode: import
            source =
                let
                    Source = [lib://DataFiles/dataset.xlsx]
                in
                    Source
        tag: ''
        annotation PBI_NavigationStepName = Main
        annotation PBI_ResultType = Table
        measure 'Best Performing Employee (Highest Sales)' = FirstSortedValue([Employee-Sales], -Aggr(SUM([Total Sales]), [Employee-Sales]))
          formatString: U
          lineageTag: c178cd96-c622-4fe5-87e5-d843c588450c
        measure 'Highest Sales Location' = FirstSortedValue([Employee-Sales], -Aggr(SUM([Total Sales]), [Employee-Sales]))
          formatString: U
          lineageTag: e5ec6a2a-308c-4233-9055-d43a8e6014fa
        measure 'Sales per Day' = SUM([Total Sales]) / COUNT(DISTINCT [Date])
          formatString: U
          lineageTag: 84003da5-c604-4a0a-b429-1389a752b928
        measure 'Units Sold per Transaction' = SUM([Total Units]) / COUNT([Total Units])
          formatString: U
          lineageTag: 88a85909-b018-43cc-9ac9-cfb99960726e
        measure 'Sales per Employee per Location' = SUM([Total Sales]) / COUNT(DISTINCT [Employee-Sales])
          formatString: U
          lineageTag: e497bcbe-89bb-4666-a1cc-49b4ab05af06
```