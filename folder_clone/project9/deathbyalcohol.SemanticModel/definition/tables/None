```yaml
createOrReplace

    table Main
        lineageTag: b7cff6a8-c974-4cae-8fc5-de4c8a63f236
        column name
            dataType: string
            lineageTag: 9c69b76e-33f8-431e-90c4-202bac47d624
            summarizeBy: none
            sourceColumn: name
            annotation SummarizationSetBy = Automatic
        column type
            dataType: string
            lineageTag: 60c72b2e-f93c-497e-9797-867317158d03
            summarizeBy: none
            sourceColumn: type
            annotation SummarizationSetBy = Automatic
        partition Main = m
            mode: import
            source =
                let
                    dataManagerTables = '','Employees','Sales','Locations';
                    For each name in $(dataManagerTables)
                        Let index = 0;
                        Let currentName = name; 
                        Let tableNumber = TableNumber(name); 
                        Let matches = 0; 
                        Do while not IsNull(tableNumber) or (index > 0 and matches > 0)
                            index = index + 1; 
                            currentName = name & '-' & index; 
                            tableNumber = TableNumber(currentName) 
                            matches = Match('$(currentName)', $(dataManagerTables));
                        Loop 
                        If index > 0 then 
                                Rename Table '$(name)' to '$(currentName)'; 
                        EndIf; 
                    Next; 
                    Set dataManagerTables = ;
                    Unqualify *;
                    __cityAliasesBase:
                    LOAD
                        Alias AS [__City],
                        geoKey AS [__geoKey],
                        CountryCode AS [__CityCountryCode]
                    FROM [lib://DataFiles/cityAliases.qvd]
                    (qvd);
                    __cityGeoBase:
                    LOAD
                        geoKey AS [__geoKey],
                        geoPoint AS [__GeoPoint]
                    FROM [lib://DataFiles/cityGeo.qvd]
                    (qvd);
                    __cityName2Key:
                    MAPPING LOAD
                        __City,
                        __geoKey
                    RESIDENT __cityAliasesBase;
                    __cityKey2GeoPoint:
                    MAPPING LOAD
                        __geoKey,
                        __GeoPoint
                    RESIDENT __cityGeoBase;
                    [Employees]:
                    LOAD
                        [EmpID] AS [Employee-Sales],
                        [Name]
                     FROM [lib://DataFiles/dataset.xlsx]
                    (ooxml, embedded labels, table is Employees);
                    [Sales]:
                    LOAD
                        [EmpID] AS [Employee-Sales],
                        [LocId] AS [Location-Sales],
                        Date(Date#([Date], 'DD/MM/YYYY') ) AS [Date],
                        [Total Sales],
                        [Total Units]
                     FROM [lib://DataFiles/dataset.xlsx]
                    (ooxml, embedded labels, table is Sales);
                    [Locations]:
                    LOAD
                        [LocId] AS [Location-Sales],
                        [City],
                        APPLYMAP( '__cityKey2GeoPoint', APPLYMAP( '__cityName2Key', LOWER([City])), '-') AS [Locations.City_GeoInfo]
                     FROM [lib://DataFiles/dataset.xlsx]
                    (ooxml, embedded labels, table is Locations);
                    TAG FIELD [City] WITH '$geoname', '$relates_Locations.City_GeoInfo';
                    TAG FIELD [Locations.City_GeoInfo] WITH '$geopoint', '$hidden', '$relates_City';
                    DROP TABLES __cityAliasesBase, __cityGeoBase;
                    [autoCalendar]: 
                      DECLARE FIELD DEFINITION Tagged ('$date')
                    FIELDS
                      Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year'),
                      Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$quarter', '$cyclic'),
                      Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$yearquarter', '$qualified'),
                      Dual('Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [_YearQuarter] Tagged ('$yearquarter', '$hidden', '$simplified'),
                      Month($1) AS [Month] Tagged ('$month', '$cyclic'),
                      Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth', '$qualified'),
                      Dual(Month($1), monthstart($1)) AS [_YearMonth] Tagged ('$axis', '$yearmonth', '$simplified', '$hidden'),
                      Dual('W'&Num(Week($1),00), Num(Week($1),00)) AS [Week] Tagged ('$weeknumber', '$cyclic'),
                      Date(Floor($1)) AS [Date] Tagged ('$axis', '$date', '$qualified'),
                      Date(Floor($1), 'D') AS [_Date] Tagged ('$axis', '$date', '$hidden', '$simplified'),
                      If (DayNumberOfYear($1) <= DayNumberOfYear(Today()), 1, 0) AS [InYTD] ,
                      Year(Today())-Year($1) AS [YearsAgo] ,
                      If (DayNumberOfQuarter($1) <= DayNumberOfQuarter(Today()),1,0) AS [InQTD] ,
                      4*Year(Today())+Ceil(Month(Today())/3)-4*Year($1)-Ceil(Month($1)/3) AS [QuartersAgo] ,
                      Ceil(Month(Today())/3)-Ceil(Month($1)/3) AS [QuarterRelNo] ,
                      If(Day($1)<=Day(Today()),1,0) AS [InMTD] ,
                      12*Year(Today())+Month(Today())-12*Year($1)-Month($1) AS [MonthsAgo] ,
                      Month(Today())-Month($1) AS [MonthRelNo] ,
                      If(WeekDay($1)<=WeekDay(Today()),1,0) AS [InWTD] ,
                      (WeekStart(Today())-WeekStart($1))/7 AS [WeeksAgo] ,
                      Week(Today())-Week($1) AS [WeekRelNo] ;
                    DERIVE FIELDS FROM FIELDS [Date] USING [autoCalendar];
        annotation PBI_NavigationStepName = Main
        annotation PBI_ResultType = Table
        measure 'Best Performing Employee (Highest Sales)' = FirstSortedValue([Employee-Sales], -Aggr(SUM([Total Sales]), [Employee-Sales]))
          formatString: $ #,0.00
          lineageTag: a3f213e8-2369-403d-a761-a39e44539ff9
        measure 'Highest Sales Location' = FirstSortedValue([Employee-Sales], -Aggr(SUM([Total Sales]), [Employee-Sales]))
          formatString: $ #,0.00
          lineageTag: 30557431-175d-4642-8ae6-bc0bb9aeff25
        measure 'Sales per Day' = SUM([Total Sales]) / COUNT(DISTINCT [Date])
          formatString: $ #,0.00
          lineageTag: 5de41727-d7b0-4698-b312-e95816372053
        measure 'Units Sold per Transaction' = SUM([Total Units]) / COUNT([Total Units])
          formatString: 0
          lineageTag: 1c4b600d-69d5-4b75-ade5-d88c50175144
        measure 'Sales per Employee per Location' = SUM([Total Sales]) / COUNT(DISTINCT [Employee-Sales])
          formatString: $ #,0.00
          lineageTag: b735b998-e979-407f-9288-8eaab841e02c
```