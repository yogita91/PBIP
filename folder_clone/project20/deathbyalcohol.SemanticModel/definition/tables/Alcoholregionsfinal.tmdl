createOrReplace

    table Main
        lineageTag: a7e58928-90ef-4824-b43c-8c71f2e3e657
        column Name
            dataType: string
            lineageTag: 1a46ec71-e763-48be-bdc9-60f6d550557b
            summarizeBy: none
            sourceColumn: Name
            annotation SummarizationSetBy = Automatic
        partition __cityAliasesBase = m
            mode: import
            source =
                let
                    Source = [lib://DataFiles/cityAliases.qvd]
                in
                    Source
        partition __cityGeoBase = m
            mode: import
            source =
                let
                    Source = [lib://DataFiles/cityGeo.qvd]
                in
                    Source
        partition __cityName2Key = m
            mode: import
            source =
                let
                    Source = MAPPING LOAD
                        __City,
                        __geoKey
                    RESIDENT __cityAliasesBase
                in
                    Source
        partition __cityKey2GeoPoint = m
            mode: import
            source =
                let
                    Source = MAPPING LOAD
                        __geoKey,
                        __GeoPoint
                    RESIDENT __cityGeoBase
                in
                    Source
        partition Employees = m
            mode: import
            source =
                let
                    Source = LOAD
                        [EmpID] AS [Employee-Sales],
                        [Name]
                    FROM [lib://DataFiles/dataset.xlsx]
                    (ooxml, embedded labels, table is Employees)
                in
                    Source
        partition Sales = m
            mode: import
            source =
                let
                    Source = LOAD
                        [EmpID] AS [Employee-Sales],
                        [LocId] AS [Location-Sales],
                        Date(Date#([Date], 'DD/MM/YYYY')) AS [Date],
                        [Total Sales],
                        [Total Units]
                    FROM [lib://DataFiles/dataset.xlsx]
                    (ooxml, embedded labels, table is Sales)
                in
                    Source
        partition Locations = m
            mode: import
            source =
                let
                    Source = LOAD
                        [LocId] AS [Location-Sales],
                        [City],
                        APPLYMAP('__cityKey2GeoPoint', APPLYMAP('__cityName2Key', LOWER([City])), '-') AS [Locations.City_GeoInfo]
                    FROM [lib://DataFiles/dataset.xlsx]
                    (ooxml, embedded labels, table is Locations)
                in
                    Source
        tag field [City] with '$geoname', '$relates_Locations.City_GeoInfo'
        tag field [Locations.City_GeoInfo] with '$geopoint', '$hidden', '$relates_City'
        drop tables __cityAliasesBase, __cityGeoBase
        partition autoCalendar = m
            mode: define
            source:
                name: Tagged ('$date')
                fields:
                  - Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year')
                  - Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$quarter', '$cyclic')
                  - Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$yearquarter', '$qualified')
                  - Dual('Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [_YearQuarter] Tagged ('$yearquarter', '$hidden', '$simplified')
                  - Month($1) AS [Month] Tagged ('$month', '$cyclic')
                  - Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth', '$qualified')
                  - Dual(Month($1), monthstart($1)) AS [_YearMonth] Tagged ('$axis', '$yearmonth', '$simplified', '$hidden')
                  - If (DayNumberOfYear($1) <= DayNumberOfYear(Today()), 1, 0) AS [InYTD]
                  - Year(Today())-Year($1) AS [YearsAgo]
                  - If (DayNumberOfQuarter($1) <= DayNumberOfQuarter(Today()),1,0) AS [InQTD]
                  - 4*Year(Today())+Ceil(Month(Today())/3)-4*Year($1)-Ceil(Month($1)/3) AS [QuartersAgo]
                  - Ceil(Month(Today())/3)-Ceil(Month($1)/3) AS [QuarterRelNo]
                  - If(Day($1)<=Day(Today()),1,0) AS [InMTD]
                  - Month(Today())-Month($1) AS [MonthRelNo]
                  - If(WeekDay($1)<=WeekDay(Today()),1,0) AS [InWTD]
                  - (WeekStart(Today())-WeekStart($1))/7 AS [WeeksAgo]
                  - Week(Today())-Week($1) AS [WeekRelNo]
            deriveFields:
              from: FIELDS [Date]
              using: [autoCalendar]
        measure 'Best Performing Employee (Highest Sales)' = FirstSortedValue([Employee-Sales], -Aggr(SUM([Total Sales]), [Employee-Sales]))
          formatString: $ #,0
          lineageTag: d830217b-babb-40f9-81f3-6af007e045f2
        measure 'Highest Sales Location' = FirstSortedValue([Employee-Sales], -Aggr(SUM([Total Sales]), [Employee-Sales]))
          formatString: $ #,0
          lineageTag: b613752b-06bc-4dcf-8836-b3064a34ca68
        measure 'Sales per Day' = SUM([Total Sales]) / COUNT(DISTINCT [Date])
          formatString: $ #,0
          lineageTag: 45740e10-4863-4861-b9cf-e86e474b7927
        measure 'Units Sold per Transaction' = SUM([Total Units]) / COUNT([Total Units])
          formatString: $ #,0
          lineageTag: b86f122c-a183-4374-8483-45716a624f62
        measure 'Sales per Employee per Location' = SUM([Total Sales]) / COUNT(DISTINCT [Employee-Sales])
          formatString: $ #,0
          lineageTag: 785bc721-cad4-4fd9-9512-e51be8468425